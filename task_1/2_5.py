import threading
import time
import random

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞—Å—Å—ã ===
finish_line = 100
obstacle_positions = [30, 60, 80]   # –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ ‚Äî —Å—Ç–æ–ø 0.5—Å
boost_positions    = [20, 50, 70]   # –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ ‚Äî –±—É—Å—Ç x2 –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã

# === –ö–æ–º–∞–Ω–¥—ã –∏ –æ—á–∫–∏ ===
teams = {
    "–∫—Ä–∞—Å–Ω—ã–µ": ["üöó –ö—Ä–∞—Å–Ω–∞—è-1", "üöó –ö—Ä–∞—Å–Ω–∞—è-2"],
    "—Å–∏–Ω–∏–µ":   ["üöô –°–∏–Ω—è—è-1",   "üöô –°–∏–Ω—è—è-2"],
}
points_system = [10, 8, 6, 4, 2]  # –æ—á–∫–∏ –∑–∞ 1‚Äì5 –º–µ—Å—Ç–∞
team_scores = {"–∫—Ä–∞—Å–Ω—ã–µ": 0, "—Å–∏–Ω–∏–µ": 0}
name_to_team = {name: team for team, names in teams.items() for name in names}

# === –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è/—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ===
print_lock = threading.Lock()
results_lock = threading.Lock()
results = []  # –ø–æ—Ä—è–¥–æ–∫ —Ñ–∏–Ω–∏—à–∞ (–∏–º–µ–Ω–∞ –º–∞—à–∏–Ω)

class RacingCar:
    def __init__(self, name, speed, team):
        self.name = name
        self.base_speed = speed
        self.team = team
        self.position = 0.0
        self.boost_until = 0.0           # –≤—Ä–µ–º—è (epoch), –ø–æ–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –±—É—Å—Ç
        self.obstacles_hit = set()        # –∫–∞–∫–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è —É–∂–µ ¬´—Å—Ä–∞–±–æ—Ç–∞–ª–∏¬ª
        self.boosts_used = set()          # –∫–∞–∫–∏–µ –±—É—Å—Ç—ã —É–∂–µ ¬´–ø–æ–¥–æ–±—Ä–∞–Ω—ã¬ª

    def race(self, finish_line, results_list):
        last_pos = self.position
        while self.position < finish_line:
            # --- –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞ —Ç–∏–∫ ---
            # –¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å –±—É—Å—Ç
            now = time.time()
            boosting = now < self.boost_until
            speed_factor = 2.0 if boosting else 1.0

            move = self.base_speed * random.uniform(0.8, 1.2) * speed_factor
            self.position += move

            # --- —Å–æ–±—ã—Ç–∏—è —Ç—Ä–∞—Å—Å—ã (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π) ---
            # –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
            for pos in obstacle_positions:
                if pos not in self.obstacles_hit and last_pos < pos <= self.position:
                    self.obstacles_hit.add(pos)
                    with print_lock:
                        print(f"{self.name}: ‚ö†Ô∏è —Å—Ç–æ–ª–∫–Ω—É–ª–∞—Å—å —Å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ–º –Ω–∞ {pos}–º ‚Äî –ø–∞—É–∑–∞ 0.5—Å")
                    time.sleep(0.5)

            # —É—Å–∫–æ—Ä–µ–Ω–∏—è
            for pos in boost_positions:
                if pos not in self.boosts_used and last_pos < pos <= self.position:
                    self.boosts_used.add(pos)
                    # –±—É—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
                    self.boost_until = max(self.boost_until, time.time() + 2.0)
                    with print_lock:
                        print(f"{self.name}: üöÄ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–∞ 2—Å —É {pos}–º!")

            # --- –≤—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ---
            with print_lock:
                bar = "‚ñà" * int(self.position // 10)
                tag = " (BOOST)" if boosting else ""
                print(f"{self.name}: {bar:10} {self.position:5.0f}–º{tag}")

            last_pos = self.position
            time.sleep(0.2)

        # —Ñ–∏–Ω–∏—à
        with results_lock:
            results_list.append(self.name)
        with print_lock:
            print(f"üèÅ {self.name} —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª!")

def main():
    # —Å–æ–∑–¥–∞—ë–º –º–∞—à–∏–Ω–∫–∏ (–∏–º–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–æ–º–∞–Ω–¥–∞–º –≤—ã—à–µ)
    cars = [
        RacingCar("üöó –ö—Ä–∞—Å–Ω–∞—è-1", 15, "–∫—Ä–∞—Å–Ω—ã–µ"),
        RacingCar("üöó –ö—Ä–∞—Å–Ω–∞—è-2", 14, "–∫—Ä–∞—Å–Ω—ã–µ"),
        RacingCar("üöô –°–∏–Ω—è—è-1",   16, "—Å–∏–Ω–∏–µ"),
        RacingCar("üöô –°–∏–Ω—è—è-2",   13, "—Å–∏–Ω–∏–µ"),
    ]

    print("üèÅ –ì–û–ù–ö–ê –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!")
    print("=" * 60)

    threads = []
    for car in cars:
        t = threading.Thread(target=car.race, args=(finish_line, results), name=car.name)
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

    print("=" * 60)
    print("üèÜ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for i, car_name in enumerate(results, 1):
        pts = points_system[i-1] if i-1 < len(points_system) else 0
        team = name_to_team.get(car_name, "?")
        team_scores[team] += pts
        print(f"{i}. {car_name} ‚Äî +{pts} –æ—á–∫–æ–≤ ({team})")

    print("\nüìä –ö–æ–º–∞–Ω–¥–Ω—ã–π –∑–∞—á—ë—Ç:")
    for team, score in team_scores.items():
        print(f"–ö–æ–º–∞–Ω–¥–∞ {team}: {score} –æ—á–∫–æ–≤")

    # –ø–æ–±–µ–¥–∏—Ç–µ–ª—å/–Ω–∏—á—å—è
    red, blue = team_scores["–∫—Ä–∞—Å–Ω—ã–µ"], team_scores["—Å–∏–Ω–∏–µ"]
    if red > blue:
        print("\nü•á –ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –ö–†–ê–°–ù–´–ï!")
    elif blue > red:
        print("\nü•á –ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –°–ò–ù–ò–ï!")
    else:
        print("\nü§ù –ù–∏—á—å—è!")

if __name__ == "__main__":
    main()
