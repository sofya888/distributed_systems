import threading
import time
import random
from queue import PriorityQueue
from itertools import count

# --- –ö–æ–Ω—Ñ–∏–≥ ---
product_types = ["–µ–¥–∞", "–æ–¥–µ–∂–¥–∞", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"]
producers_config = [
    {"name": "–§–∞–±—Ä–∏–∫–∞-–ê", "type": "–µ–¥–∞",         "count": 3},
    {"name": "–§–∞–±—Ä–∏–∫–∞-–ë", "type": "–æ–¥–µ–∂–¥–∞",      "count": 4},
    {"name": "–§–∞–±—Ä–∏–∫–∞-–í", "type": "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "count": 2},
]
priority_map = {"–µ–¥–∞": 1, "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": 2, "–æ–¥–µ–∂–¥–∞": 3}

q = PriorityQueue()
seq = count()  # –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–æ—Ç–æ–Ω–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –¥–ª—è tie-break

def producer(q: PriorityQueue, name: str, product_type: str, count_items: int):
    prio = priority_map[product_type]
    for i in range(count_items):
        item = {"type": product_type, "producer": name, "idx": i}
        q.put((prio, next(seq), item))  # (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä, –¥–∞–Ω–Ω—ã–µ)
        print(f"üõ†Ô∏è  {name} –ø—Ä–æ–∏–∑–≤—ë–ª: {product_type}-{i} (prio={prio})")
        time.sleep(random.uniform(0.05, 0.2))

def consumer(q: PriorityQueue, name: str, accepts=None):
    accepts_set = set(accepts) if accepts else None
    while True:
        prio, _, item = q.get()  # –±–µ—Ä—ë–º –∫–æ—Ä—Ç–µ–∂, item –º–æ–∂–µ—Ç –±—ã—Ç—å None (—Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)
        if item is None:
            q.task_done()
            print(f"üõë {name}: —Å—Ç–æ–ø")
            break

        ptype = item["type"]
        if accepts_set is None or ptype in accepts_set:
            print(f"üõí {name} –∫—É–ø–∏–ª: {ptype} –æ—Ç {item['producer']}-{item['idx']} (prio={prio})")
            time.sleep(random.uniform(0.1, 0.3))
            q.task_done()
        else:
            # –Ω–µ –º–æ–π —Ç–∏–ø ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞—é –æ–±—Ä–∞—Ç–Ω–æ (—Å –Ω–æ–≤—ã–º seq)
            q.task_done()
            q.put((prio, next(seq), item))
            time.sleep(0.05)

if __name__ == "__main__":
    # –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏
    prod_threads = [
        threading.Thread(target=producer,
                         args=(q, cfg["name"], cfg["type"], cfg["count"]),
                         name=f"PROD-{cfg['name']}")
        for cfg in producers_config
    ]
    # –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
    consumers_config = [
        {"name": "–ú–∞–≥–∞–∑–∏–Ω-–í—Å–µ",   "accepts": None},
        {"name": "–≠–ª–µ–∫—Ç—Ä–æ–ú–∞—Ä–∫–µ—Ç", "accepts": {"—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"}},
        {"name": "–§—É–¥–∫–æ—Ä—Ç",       "accepts": {"–µ–¥–∞"}},
    ]
    cons_threads = [
        threading.Thread(target=consumer,
                         args=(q, c["name"], c["accepts"]),
                         name=f"CONS-{c['name']}")
        for c in consumers_config
    ]

    print("üöÄ –°—Ç–∞—Ä—Ç—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π...")
    for t in prod_threads: t.start()
    for t in cons_threads: t.start()

    for t in prod_threads: t.join()  # –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∫–ª–∞—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
    q.join()                         # –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã

    # –ü–æ—Å—ã–ª–∞–µ–º —Å—Ç–æ–ø-—Å–µ–Ω—Ç–∏–Ω–µ–ª—ã (—Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π)
    for _ in cons_threads:
        q.put((float('inf'), next(seq), None))  # —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç + —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seq

    for t in cons_threads: t.join()
    print("üéâ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
