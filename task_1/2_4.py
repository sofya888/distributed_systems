import threading
import time
import random

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∑–∞–¥–∞–Ω–∏—é ===
bar_width = 20            # —à–∏—Ä–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
update_interval = 0.2     # —Ä–∞–∑ –≤ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–±–Ω–æ–≤–ª—è—Ç—å –±–∞—Ä
max_simultaneous_downloads = 3

download_semaphore = threading.Semaphore(max_simultaneous_downloads)

# === –û–±—â–∏–µ —à—Ç—É–∫–∏ –¥–ª—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∏ —Å—á—ë—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π ===
print_lock = threading.Lock()
active_lock = threading.Lock()
active_downloads = 0      # —Å–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –∫–∞—á–∞–µ—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ


def draw_progress(filename, percent, active_now, total_files):
    """–†–∏—Å—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ)."""
    filled = int(percent / 100 * bar_width)
    empty = bar_width - filled
    bar = "[" + "#" * filled + "_" * empty + "]"
    with print_lock:
        # filename –≤—ã—Ä–æ–≤–Ω—è–µ–º, —á—Ç–æ–±—ã —Å—Ç–æ–ª–±—Ü—ã –±—ã–ª–∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ
        print(f"{filename:12} {bar} {percent:5.1f}% | –°–∫–∞—á–∏–≤–∞–µ—Ç—Å—è {active_now}/{total_files}", flush=True)


def download_file(filename, size, total_files):
    """
    –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º.
    –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π —Å–µ–º–∞—Ñ–æ—Ä–æ–º.
    """
    global active_downloads

    # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º ¬´–ø—Ä–∞–≤–æ –∫–∞—á–∞—Ç—å¬ª: –Ω–µ –±–æ–ª—å—à–µ N –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    download_semaphore.acquire()
    with active_lock:
        active_downloads += 1
        current_active = active_downloads

    # –°–ª—É—á–∞–π–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å "—Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
    download_time = random.uniform(1, 3)

    start = time.time()
    end = start + download_time

    # –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ
    draw_progress(filename, 0.0, current_active, total_files)

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ä –∫–∞–∂–¥—ã–µ update_interval
        while True:
            now = time.time()
            if now >= end:
                break
            percent = min(100.0, (now - start) / download_time * 100.0)
            # —á–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            with active_lock:
                current_active = active_downloads
            draw_progress(filename, percent, current_active, total_files)
            time.sleep(update_interval)

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä –Ω–∞ 100%
        with active_lock:
            current_active = active_downloads
        draw_progress(filename, 100.0, current_active, total_files)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        with print_lock:
            print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞: {filename} ({download_time:.1f} —Å–µ–∫)", flush=True)

    finally:
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º ¬´–ø—Ä–∞–≤–æ –∫–∞—á–∞—Ç—å¬ª
        with active_lock:
            active_downloads -= 1
        download_semaphore.release()


# === –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===
if __name__ == "__main__":
    files = [
        ("document.pdf", 2.5),
        ("image.jpg",    1.8),
        ("video.mp4",    3.0),
        ("music.mp3",    2.2),
        ("archive.zip",  2.7),
    ]
    total = len(files)

    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å –ª–∏–º–∏—Ç–æ–º –ø–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º...")
    start_time = time.time()

    threads = []
    for filename, size in files:
        t = threading.Thread(target=download_file, args=(filename, size, total), name=f"DL-{filename}")
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

    total_time = time.time() - start_time
    print(f"‚è±Ô∏è  –í—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ {total_time:.1f} —Å–µ–∫")
